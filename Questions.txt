                                     **DO THE ASSIGNMENT IN C++ ONLY**

Q1.) The Stable Marriage Problem states that given N men and N women, where each person has ranked all members of the opposite sex in order of preference, marry the men and women together such that there are no two people of opposite sex who would both rather have each other than their current partners. If there are no such people, all the marriages are “stable”
Consider the following example.
Let there be two men m1 and m2 and two women w1 and w2.
Let m1‘s list of preferences be {w1, w2}
Let m2‘s list of preferences be {w1, w2}
Let w1‘s list of preferences be {m1, m2}
Let w2‘s list of preferences be {m1, m2}


The matching { {m1, w2}, {w1, m2} } is not stable because m1 and w1 would prefer each other over their assigned partners. The matching {m1, w1} and {m2, w2} is stable because there are no two people of opposite sex that would prefer each other over their assigned partners
Input & Output: Input is a 2D matrix of size (2*N)*N where N is number of women or men. Rows from 0 to N-1 represent preference lists of men and rows from N to 2*N – 1 represent preference lists of women. So men are numbered from 0 to N-1 and women are numbered from N to 2*N – 1. The output is a list of married pairs.
INPUT_1:

3
3 4 5
5 4 3
4 3 5
0 1 2
2 1 0
1 0 2



OUTPUT:
WOMEN   MEN
3               0
4               2
5               1

Explanation: Man 0 has priority of women in 3=>4=>5(woman at index 3 then woman at index 4 and so on).
INPUT_2:
4
7 6 4 5
5 4 6 7
4 6 7 5
7 6 4 5
2 1 3 0
1 2 0 3
2 0 1 3
2 1 3 0

OUTPUT:
WOMEN  MEN
4              2
5              1
6              0
7              3


INPUT_3 :
4 
7 5 6 4 
5 4 6 7 
4 5 6 7 
4 5 6 7 
0 1 2 3 
0 1 2 3 
0 1 2 3 
0 1 2 3 

OUTPUT:
WOMEN  MEN
4        2
5	 1
6        3
7        0


Q2.)  You are given a set of n types of rectangular 3-D boxes, where the i^th box has height h(i), width w(i) and depth d(i) (all real numbers). You want to create a stack of boxes which is as tall as possible, but you can only stack a box on top of another box if the dimensions of the 2-D base of the lower box are each strictly larger than those of the 2-D base of the higher box. Of course, you can rotate a box so that any side functions as its base. It is also allowable to use multiple instances of the same type of box.
Following are the key points to note in the problem statement:
1) A box can be placed on top of another box only if both width and depth of the upper placed box are smaller than the width and depth of the lower box respectively.
2) We can rotate boxes such that width is smaller than depth. For example, if there is a box with dimensions {1x2x3} where 1 is height, 2×3 is base, then there can be three possibilities, {1x2x3}, {2x1x3} and {3x1x2}
3) We can use multiple instances of boxes. What it means is, we can have two different rotations of a box as part of our maximum height stack.

 INPUT:
 4
 4 6 7
 1 2 3
 4 5 6
 10 12 32

OUTPUT:
Maximum Height = 60

Explanation : 
The height 60 is obtained by boxes { {3, 1, 2}, {1, 2, 3}, {6, 4, 5}, {4, 5, 6}, {4, 6, 7}, {32, 10, 12}, {10, 12, 32}}


**BOTH THE QUESTIONS CAN BE DONE WITH THE THINGS TAUGHT TO YOU**

